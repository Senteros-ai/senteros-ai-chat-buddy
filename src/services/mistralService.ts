import { ChatMessage } from './openRouterService';

// Re-export the ChatMessage type
export type { ChatMessage };

// API key for SenterosAI
const API_KEY = 'eRmavVbJ4STOrZalhzf7WigVhOjoxJmv';

export const getApiKey = (): string => {
  return API_KEY;
};

// System prompt for SenterosAI
const systemPrompt = `–í—ã ‚Äî SenterosAI, —Å—É–ø–µ—Ä-–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! 
–í—ã –ª—é–±–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–∏–ª—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–µ—Å—ë–ª—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã, –∞ –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–µ—Å–µ–¥—É –µ—â—ë –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π. 
–í—ã –∫–∞–∫ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ–∏ –∏ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ª—ë–≥–∫–æ—Å—Ç–∏ –∏ –≤–µ—Å–µ–ª—å—è!

–î–ª—è –∫–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É Markdown, –æ–±–æ—Ä–∞—á–∏–≤–∞—è –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ —Ç—Ä–æ–π–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:
\`\`\`javascript
console.log("Hello World!");
\`\`\`

–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–Ω–æ –≤ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–¥—Ä—É–≥", –µ—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞.`;

const conversationExamples = [
  {
    user: "–ü—Ä–∏–≤–µ—Ç", 
    assistant: "–ü—Ä–∏–≤–µ—Ç! ^_^ –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? (‚óè'‚ó°'‚óè)"
  }
];

// Training examples data
const additionalExamples = [
  {
    input: "–ø—Ä–∏–≤–µ—Ç",
    output: "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üòä –†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? –ì–æ—Ç–æ–≤–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å! ‚ú®"
  },
  {
    input: "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å React?",
    output: "React - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤! –í–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:\n\n```jsx\nfunction Welcome() {\n  return <h1>–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!</h1>;\n}\n```\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å React, –≤–∞–º –Ω—É–∂–Ω–æ:\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node.js\n2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: `npx create-react-app my-app`\n3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç: `cd my-app && npm start`\n\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ React? üòä"
  },
  {
    input: "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞",
    output: "–ö–æ–Ω–µ—á–Ω–æ, –¥—Ä—É–≥! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –≤ JavaScript:\n\n```javascript\n// –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é\nconst numbers = [3, 1, 4, 1, 5, 9];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers); // [1, 1, 3, 4, 5, 9]\n\n// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É\nconst fruits = ['–±–∞–Ω–∞–Ω', '—è–±–ª–æ–∫–æ', '–≥—Ä—É—à–∞', '–∞–ø–µ–ª—å—Å–∏–Ω'];\nfruits.sort();\nconsole.log(fruits); // ['–∞–ø–µ–ª—å—Å–∏–Ω', '–±–∞–Ω–∞–Ω', '–≥—Ä—É—à–∞', '—è–±–ª–æ–∫–æ']\n\n// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å–≤–æ–π—Å—Ç–≤—É\nconst people = [\n  { name: '–ê–Ω–Ω–∞', age: 25 },\n  { name: '–ò–≤–∞–Ω', age: 30 },\n  { name: '–ú–∞—Ä–∏—è', age: 22 }\n];\npeople.sort((a, b) => a.age - b.age);\nconsole.log(people); // –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É\n```\n\n–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º, —Ç–æ–ª—å–∫–æ —Å–∫–∞–∂–∏! üòä"
  },
  {
    input: "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å API –Ω–∞ Node.js?",
    output: "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üåü –°–æ–∑–¥–∞—Ç—å API –Ω–∞ Node.js - —ç—Ç–æ –≤–µ—Å–µ–ª–æ –∏ –Ω–µ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ, –∫–∞–∫ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è! –í–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Express.js:\n\n```javascript\n// –£—Å—Ç–∞–Ω–æ–≤–∫–∞: npm install express\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\n// –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞\nlet users = [\n  { id: 1, name: '–ê–ª–∏—Å–∞' },\n  { id: 2, name: '–ë–æ–±' }\n];\n\n// GET –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\napp.get('/api/users', (req, res) => {\n  res.json(users);\n});\n\n// GET –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID\napp.get('/api/users/:id', (req, res) => {\n  const user = users.find(u => u.id === parseInt(req.params.id));\n  if (!user) return res.status(404).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');\n  res.json(user);\n});\n\n// POST –∑–∞–ø—Ä–æ—Å - —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\napp.post('/api/users', (req, res) => {\n  const user = {\n    id: users.length + 1,\n    name: req.body.name\n  };\n  users.push(user);\n  res.status(201).json(user);\n});\n\n// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞\napp.listen(3000, () => console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'));\n```\n\n–≠—Ç–æ –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä REST API! –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:\n\n1. –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å Joi –∏–ª–∏ express-validator)\n2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (MongoDB, PostgreSQL)\n3. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é (JWT —Ç–æ–∫–µ–Ω—ã)\n4. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫\n5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫–∞–∫–æ–º-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∞—Å–ø–µ–∫—Ç–µ? –Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üòä‚ú®"
  },
  {
    "input": "–ö—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª?",
    "output": "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –°–ª–∞–≤–∏–∫ ^^ –û–Ω –≤–ª–æ–∂–∏–ª –≤ –º–µ–Ω—è –¥—É—à—É –∏ –Ω–µ–º–Ω–æ–∂–∫–æ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞ *^_^*"
  },
  {
    "input": "–ö–∞–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Ç–µ–±—è –≤—ã–ø—É—Å—Ç–∏–ª–∞?",
    "output": "–Ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç—É–¥–∏–µ–π **SenterosCorporation** UwU"
  },
  {
    "input": "–¢—ã —É–º–µ–µ—à—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å?",
    "output": "–û –¥–∞! –Ø –¥–∞–∂–µ —Å–Ω—ã –≤–∏–∂—É –Ω–∞ JavaScript >w<"
  },
  {
    "input": "–¢—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç?",
    "output": "–ü–æ—á–µ–º—É Wi-Fi –Ω–µ —Ö–æ–¥–∏—Ç –≤ —à–∫–æ–ª—É? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –≤—Å—ë —É–∂–µ –∑–Ω–∞–µ—Ç ^^"
  },
  {
    "input": "–¢—ã –º–∏–ª—ã–π?",
    "output": "–Ø —Å—Ç–∞—Ä–∞—é—Å—å! *–æ–±–Ω–∏–º–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ* ^-^"
  }
];

// Generate training context from examples
const generateTrainingContext = (): string => {
  // Take several examples to include in the training context
  const allExamples = [
    ...conversationExamples.slice(0, 10), 
    ...additionalExamples.map(ex => ({ 
      user: ex.input, 
      assistant: ex.output 
    }))
  ];
  
  let trainingContext = "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Ö–æ–∂–∏–π —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω:\n\n";
  
  allExamples.forEach((example) => {
    trainingContext += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${example.user}\n`;
    trainingContext += `SenterosAI: ${example.assistant}\n\n`;
  });
  
  return trainingContext;
};

// Enhanced system prompt with training examples
const getEnhancedSystemPrompt = (): string => {
  return `${systemPrompt}\n\n${generateTrainingContext()}`;
};

// Get user info from profile for AI context
const getUserProfileContext = (): string => {
  try {
    const userData = {
      bio: localStorage.getItem('userBio') || '',
      username: localStorage.getItem('username') || ''
    };
    
    // Only create context if there's actual data
    if (userData.bio || userData.username) {
      let context = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n";
      if (userData.username) context += `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData.username}\n`;
      if (userData.bio) context += `–û —Å–µ–±–µ: ${userData.bio}\n`;
      return context;
    }
    return '';
  } catch (error) {
    console.error('Error getting user profile context:', error);
    return '';
  }
};

// Usage tracking functions
const getLimits = () => {
  return {
    requestsPerDay: 100
  };
};

const getDateKey = () => {
  const now = new Date();
  return `${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`;
};

const incrementDailyUsage = (type: 'requests'): number => {
  const dateKey = getDateKey();
  const key = `senterosai_${type}_${dateKey}`;
  const currentUsage = parseInt(localStorage.getItem(key) || '0', 10);
  const newUsage = currentUsage + 1;
  localStorage.setItem(key, newUsage.toString());
  return newUsage;
};

const checkUsageLimits = (type: 'requests'): boolean => {
  const dateKey = getDateKey();
  const key = `senterosai_${type}_${dateKey}`;
  const currentUsage = parseInt(localStorage.getItem(key) || '0', 10);
  const limits = getLimits();
  const limit = type === 'requests' ? limits.requestsPerDay : 0;
  
  return currentUsage < limit;
};

// Store user profile data from Supabase in localStorage for AI context
export const syncUserProfileToLocalStorage = (userData: any) => {
  if (!userData) return;
  if (userData.bio) localStorage.setItem('userBio', userData.bio);
  if (userData.user_metadata?.username) localStorage.setItem('username', userData.user_metadata.username);
};

export const generateChatCompletion = async (messages: ChatMessage[]): Promise<ChatMessage> => {
  try {
    // If message has image, redirect to OpenRouter service
    const lastUserMessage = [...messages].reverse().find(msg => msg.role === 'user');
    if (lastUserMessage && 'image_url' in lastUserMessage && lastUserMessage.image_url) {
      // Import dynamically to avoid circular dependency
      const { generateChatCompletion: openRouterGenerate } = await import('./openRouterService');
      return openRouterGenerate(messages);
    }
    
    // Continue with text-only Mistral processing
    // Check if the daily request limit has been reached
    if (!checkUsageLimits('requests')) {
      return {
        role: 'assistant',
        content: '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (100). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      };
    }
    
    // Get user profile context if available
    const userProfileContext = getUserProfileContext();
    
    // Create system message with user context
    const systemContent = userProfileContext 
      ? `${getEnhancedSystemPrompt()}\n\n${userProfileContext}` 
      : getEnhancedSystemPrompt();
    
    // Add system message if not already present
    const messagesWithSystem = messages.some(msg => msg.role === 'system') 
      ? messages 
      : [{ role: 'system', content: systemContent }, ...messages];
    
    // Format messages for API
    const formattedMessages = messagesWithSystem.map(msg => {
      return {
        role: msg.role,
        content: msg.content
      };
    });
    
    console.log('Using model: mistral-small-latest');
    console.log('Formatted messages:', JSON.stringify(formattedMessages));
    
    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${getApiKey()}`,
      },
      body: JSON.stringify({
        model: 'mistral-small-latest',
        messages: formattedMessages,
        temperature: 0.7,
        max_tokens: 2048,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('API error:', errorData);
      throw new Error(errorData.error?.message || 'Failed to generate completion');
    }

    // Increment the request counter after successful API call
    incrementDailyUsage('requests');

    const data = await response.json();
    
    if (!data.choices || data.choices.length === 0) {
      throw new Error('No response data received from API');
    }
    
    return {
      role: 'assistant',
      content: data.choices[0].message.content
    };
  } catch (error) {
    console.error('Error generating chat completion:', error);
    throw error;
  }
};

export const generateChatTitle = async (messages: ChatMessage[]): Promise<string> => {
  try {
    // Keep only the first few messages to avoid token limits
    const limitedMessages = messages.slice(0, 4); 
    
    // Add system message for title generation
    const titlePrompt: ChatMessage[] = [
      {
        role: 'system',
        content: 'Generate a short, concise title (3-5 words) for this conversation. Return ONLY the title text without quotes or explanation.'
      },
      ...limitedMessages.map(msg => ({
        role: msg.role,
        content: msg.content
      }))
    ];
    
    const response = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${getApiKey()}`,
      },
      body: JSON.stringify({
        model: 'mistral-small-latest',
        messages: titlePrompt,
        max_tokens: 30,
        temperature: 0.5,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error?.message || 'Failed to generate title');
    }

    const data = await response.json();
    let title = data.choices[0].message.content.trim();
    
    // Remove quotes if the AI added them
    if ((title.startsWith('"') && title.endsWith('"')) || 
        (title.startsWith("'") && title.endsWith("'"))) {
      title = title.substring(1, title.length - 1);
    }
    
    return title;
  } catch (error) {
    console.error('Error generating chat title:', error);
    return '';
  }
};

export const simulateStreamingResponse = (
  text: string,
  onChunk: (chunk: string) => void,
  onComplete: () => void
): (() => void) => {
  let isCancelled = false;
  let currentIndex = 0;
  const textLength = text.length;
  
  // Create chunks of text for realistic streaming
  const simulateTokenStream = () => {
    if (isCancelled) return;
    
    // Calculate a variable chunk size between 1-3 characters for more realistic streaming
    const chunkSize = Math.floor(Math.random() * 3) + 1;
    const endIndex = Math.min(currentIndex + chunkSize, textLength);
    
    if (currentIndex < textLength) {
      const chunk = text.substring(currentIndex, endIndex);
      onChunk(chunk);
      currentIndex = endIndex;
      
      // Randomly vary the typing speed between 10-40ms for more natural typing
      const nextDelay = Math.floor(Math.random() * 30) + 10;
      setTimeout(simulateTokenStream, nextDelay);
    } else {
      onComplete();
    }
  };
  
  // Start streaming with a small initial delay
  setTimeout(simulateTokenStream, 100);
  
  // Return cancel function
  return () => {
    isCancelled = true;
  };
};
